import numpy as np
import matplotlib.pyplot as plt
import base64


# Function to convert integer to binary array
def int_to_binary_array(num, num_bits):
    return np.array(list(format(num, f'0{num_bits}b')), dtype=int)

# Function to convert binary array to integer
def binary_array_to_int(binary_array):
    return int(''.join(map(str, binary_array)), 2)



# Integer data to be sent
input_string = "Let's gooooo QPSK is working :)"

# Convert string to bytes and then encode with Base64
encoded_bytes = input_string.encode('utf-8')
integer_representation = int.from_bytes(encoded_bytes, byteorder='big')
original_data = integer_representation
#print(integer_representation)


binary_representation = bin(integer_representation)[2:]  # [2:] is used to remove the '0b' prefix
binary_length = len(binary_representation)

# Convert integer data to binary array
binary_data = int_to_binary_array(original_data, binary_length)

# Use binary_data instead of the original data
data = binary_data


if len(data) % 2 == 1:
    data = np.insert(data, 0, 0)
    
    
# QPSK modulation parameters
br = 2.48e9  # bit rate
f = br      # carrier frequency
T = 1/br    # bit duration

# Data Represented at NZR form for QPSK modulation
data_NZR = 2 * data - 1

# S/P conversion of data
counter = 0
s_p_data = np.zeros((2, len(data_NZR)//2))

counter = 0
for i in data_NZR:

    if counter % 2 == 0:
        s_p_data[0, counter//2] = i
    else:
        s_p_data[1, counter//2] = i
    counter += 1
#s_p_data = data_NZR.reshape(2, len(data)//2)

# Time vector for one bit information
t = np.arange(0, T * (len(data)//2), T/99)

# QPSK modulation
y_in = np.array([])
y_qd = np.array([])
y = np.array([])
for i in range(len(data)//2):
    y1 = s_p_data[0, i] * np.cos(2 * np.pi * f * t[i*99:(i+1)*99])
    y2 = s_p_data[1, i] * np.sin(2 * np.pi * f * t[i*99:(i+1)*99])
    y_in = np.append(y_in, y1)
    y_qd = np.append(y_qd, y2)
    y = np.append(y, y1 + y2)

Tx_sig = y  # transmitting signal after modulation

# Plotting
tt = np.arange(0, T*(len(data)/2), T/99)
plt.figure(figsize=(10, 8))

plt.subplot(3, 1, 1)
plt.plot(tt, y_in, linewidth=3)
plt.grid(True)
plt.title('Waveform for Inphase component in QPSK modulation')
plt.xlabel('Time (sec)')
plt.ylabel('Amplitude (volt)')

plt.subplot(3, 1, 2)
plt.plot(tt, y_qd, linewidth=3)
plt.grid(True)
plt.title('Waveform for Quadrature component in QPSK modulation')
plt.xlabel('Time (sec)')
plt.ylabel('Amplitude (volt)')

plt.subplot(3, 1, 3)
plt.plot(tt, Tx_sig, 'r', linewidth=3)
plt.grid(True)
plt.title('QPSK modulated signal (sum of inphase and quadrature phase signal)')
plt.xlabel('Time (sec)')
plt.ylabel('Amplitude (volt)')

# QPSK demodulation
Rx_data = np.array([])
Rx_sig = Tx_sig  # Received signal

for i in range(len(data)//2):
    # Inphase coherent detector
    Z_in = Rx_sig[i*99:(i+1)*99] * np.cos(2 * np.pi * f * t[i*99:(i+1)*99])
    Z_in_intg = np.trapz(Z_in) * (2 / T)
    #print(Z_in_intg)
    if Z_in_intg > 0:
        Rx_in_data = 1
    else:
        Rx_in_data = 0

    # Quadrature coherent detector
    Z_qd = Rx_sig[i*99:(i+1)*99] * np.sin(2 * np.pi * f * t[i*99:(i+1)*99])
    Z_qd_intg = np.trapz(Z_qd) * (2 / T)
    #print(Z_qd_intg)
    if Z_qd_intg > 0:
        Rx_qd_data = 1
    else:
        Rx_qd_data = 0
    Rx_data = np.append(Rx_data, [Rx_in_data, Rx_qd_data])

# Plotting received data
plt.figure()
plt.stem(range(len(Rx_data)), Rx_data, linefmt='r-', markerfmt='ro')
plt.title('Information after Receiving')
plt.axis([-.5, binary_length + .5, 0, 1.5])
plt.grid(True)


received_integer = binary_array_to_int(Rx_data.astype(int))
# Convert integer to bytes
rec_bytes_representation = received_integer.to_bytes((integer_representation.bit_length() + 7) // 8, byteorder='big')

# Decode bytes back to string
decoded_string = rec_bytes_representation.decode('utf-8')


plt.show()

print("Sent Word:", input_string)
print("Received Word:", decoded_string)
